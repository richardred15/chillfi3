name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.4
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: musiclib_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: server/package.json
    
    - name: Install server dependencies
      run: |
        cd server
        npm install
    
    - name: Run linting
      run: |
        cd server
        npm run lint
    
    - name: Wait for MySQL
      run: |
        for i in {30..0}; do
          if mysqladmin ping -h"127.0.0.1" --silent; then
            break
          fi
          echo 'MySQL is unavailable - sleeping'
          sleep 1
        done
        if [ "$i" = 0 ]; then
          echo 'MySQL is unavailable - exiting'
          exit 1
        fi
        echo 'MySQL is up - executing command'
    
    - name: Verify MySQL connection
      run: |
        mysql -h127.0.0.1 -utestuser -ptestpass -e "SHOW DATABASES;"
        echo "MySQL is ready - database will be created by our code"
    
    - name: Run stable tests with coverage
      run: |
        cd server
        npm run test:stable
      env:
        NODE_ENV: test
        DB_HOST: 127.0.0.1
        DB_USER: testuser
        DB_PASSWORD: testpass
        DB_NAME: musiclib_test
        JWT_SECRET: test_secret_key_for_testing
        AWS_ACCESS_KEY_ID: test_key
        AWS_SECRET_ACCESS_KEY: test_secret
        S3_BUCKET_NAME: test-bucket
        AWS_REGION: us-west-2
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        LOG_LEVEL: ERROR
    
    - name: Run integration tests
      run: |
        cd server
        npm run test:integration
      env:
        NODE_ENV: test
        DB_HOST: 127.0.0.1
        DB_USER: testuser
        DB_PASSWORD: testpass
        DB_NAME: musiclib_test
        JWT_SECRET: test_secret_key_for_testing
        AWS_ACCESS_KEY_ID: test_key
        AWS_SECRET_ACCESS_KEY: test_secret
        S3_BUCKET_NAME: test-bucket
        AWS_REGION: us-west-2
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        LOG_LEVEL: ERROR
    

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./server/coverage
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      continue-on-error: true
    
    - name: Build Docker image (test)
      if: github.event_name == 'pull_request' || github.ref != 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: |
          chillfi3:latest
          chillfi3:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Docker image (production)
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/chillfi3:latest
          ${{ secrets.DOCKER_USERNAME }}/chillfi3:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        cd server
        npm install
    
    - name: Run security audit
      run: |
        cd server
        npm audit --audit-level moderate || true
    
    - name: Check for known vulnerabilities
      run: |
        cd server
        npx audit-ci --moderate
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'